---
knitr:
  opts_chunk: 
    collapse: false
    comment: "#>" 
    fig.height: 8 
    fig.width: 8
    cache: true
---

# Mise en page 

```{r}
#| include: false

library(sf)
# import des communes du Lot
com <- st_read("data/lot.gpkg", layer = "communes", quiet = TRUE)
# import des départements français
dep <- st_read("data/lot.gpkg", layer = "departements", quiet = TRUE)
# import des restaurants
resto <- st_read("data/lot.gpkg", layer = "restaurants", quiet = TRUE)
# import des routes
route <- st_read("data/lot.gpkg", layer = "routes", quiet = TRUE)
```

```{r knitr3_init, echo=FALSE, cache=FALSE}
library(knitr)
## Global options
options(max.print="90")
opts_chunk$set(fig.height=5,
               fig.width=5)
```

Pour être finalisée, une carte thématique doit contenir certains éléments additionnels tels que : le titre, l'auteur, la source, l'échelle, l'orientation...


## Les thèmes

La fonction `mf_theme()` défini un thème cartographique. L'utilisation d'un thème permet de définir plusieurs paramètres graphiques qui sont ensuite appliqués aux cartes créées avec `mapsf`. Ces paramètres sont : les marges de la carte, la couleur principale, la couleur de fond, la position et l'aspect du titre. Un thème peut également être défini avec les fonctions `mf_init()` et `mf_export()`.

### Utiliser un thème prédéfini

Une série de thèmes prédéfinis est disponible par défaut (voir `?mf_theme`).

```{r them1, fig.show='hold', fig.width =8, fig.height = 8}
library(mapsf)
# utilisation d'une couleur de fond pour la figure, pour voir l'utilisation des marges
opar <- par(mfrow = c(2,2))
# Utilisation d'un thème prédéfini
mf_theme("default")
mf_map(com)
mf_title("Theme : 'default'")
mf_theme("darkula")
mf_map(com)
mf_title("Theme : 'darkula'")
mf_theme("candy")
mf_map(com)
mf_title("Theme : 'candy'")
mf_theme("nevermind")
mf_map(com)
mf_title("Theme : 'nevermind'")
par(opar)

```

### Modifier un thème existant

Il est possible de modifier un thème existant. Dans cet exemple, nous utilisons le thème "default" et nous en modifions quelques paramètres.

```{r theme2, fig.width = 8, fig.height = 4, fig.show='hold'}
library(mapsf)
opar <- par(mfrow = c(1,2))
mf_theme("default")
mf_map(com)
mf_title("default")
mf_theme(
  "default",
  tab = FALSE,
  font = 4,
  bg = "grey60",
  pos = "center"
)
mf_map(com)
mf_title("modified default")
par(opar)
```


### Créer un thème


Il est également possible de créer un thème.


```{r custom_theme}
mf_theme(
  bg = "lightblue",    # couleur de fond
  fg = "tomato1",      # couleur principale
  mar = c(0,0,1.5,0),  # marges
  tab = FALSE,         # style "onglet" pour le titre
  inner = FALSE,       # titre à l'intérieur de la zone de carte ou à l'extérieur
  line = 1.5,          # espace dédié au titre
  pos = "center",      # position du titre
  cex = 1.2,           # taille du titre
  font = 2             # type de fonte pour le titre
)
mf_map(com)
mf_title("New theme")
```




## Les titres

La fonction `mf_title()` permet d'ajouter un titre à une carte.


```{r title}
mf_theme("default")
mf_map(com)
mf_title("Titre de la carte")
```


Il est possible de personnaliser l'aspect du titre.

```{r title_custom}
mf_map(com)
mf_title(
  txt = "Titre de la carte", 
  pos = "center", 
  tab = FALSE, 
  bg = "tomato3", 
  fg = "lightblue", 
  cex = 1, 
  line = 1.2, 
  font = 1, 
  inner = FALSE
)
```





## Flèche d'orientation

La fonction `mf_arrow()` permet de choisir la position et l'aspect de la flèche d'orientation.

```{r north}
mf_map(com)
mf_arrow()
```


## Échelle

La fonction `mf_scale()` permet de choisir la position et l'aspect de l'échelle.

```{r scale}
mf_map(com)
mf_scale(
  size = 20,
  lwd = 2,
  cex = 1.2,
)
```


## Crédits

La fonction `mf_credits()` permet d'afficher une ligne de crédits (sources, auteur...).
```{r credit}
mf_map(com)
mf_credits("Source: ..... \nAuthors: ............")
```


## Habillage complet

La fonction `mf_layout()` permet d'afficher tous ces éléments.

```{r layout1}
mf_map(com)
mf_layout(
  title = "Le Lot",
  credits = "Author: .......\nSources: ................",
  arrow = TRUE
)
```


## Annotations


```{r annot}
# Sélection d'une commune
cahors <- com[com$NOM_COM == "Cahors", ]
mf_map(com)
mf_annotation(
  x = cahors, 
  txt = "Cahors", 
  halo = TRUE, 
  cex = 1.5
)
```


## Étiquettes

La fonction `mf_label()` est dédiée à l'afichage d'étiquettes.

```{r labs}
# Selection des communes qui intersectent la 
# commune de Cahors
com_sel <- com[st_intersects(com, com[com$NOM_COM == "Cahors", ], sparse = FALSE), ]

mf_map(com_sel)
mf_label(
  x = com_sel,
  var = "NOM_COM",
  col= "black",
  halo = TRUE,
  overlap = FALSE, 
  lines = FALSE
)
mf_scale()
```

L'argument `halo = TRUE` permet d'afficher un léger halo autour des étiquettes et l'argument `overlap = FALSE` permet de créer des étiquettes ne se recouvrant pas.


## Les légendes


```{r legends}
mf_map(com)
mf_legend(
  type = "prop", 
  val = c(1000,500,200,10), 
  inches = .4, 
  title = "Population", 
  pos = "topleft"
)
mf_legend(
  type = "choro", 
  val = c(0,10,20,30,40),
  pal = "Greens", 
  pos = "bottomright", 
  val_rnd = 0
)



```



## Centrer la carte sur une région

La fonction `mf_init()` permet d'initialiser une carte en la centrant sur une objet spatial.  

```{r init_map}
mf_init(x = com_sel)
# equivalent à 
# mf_map(com, col = NA, border = NA)
mf_map(com, add = TRUE)
mf_map(com_sel, col = NA, border = "red", lwd = 2, add = TRUE)
```




## Afficher plusieurs cartes sur la même figure

Il faut ici utiliser l'argument `mfrow` de la fonction `par()`. Le premier chiffre représente le nombre lignes et le deuxième le nombre de colonnes.  
Par exemple `par(mfrow = c(1, 2))` (1 ligne et 2 colonnes) permet d'afficher deux cartes côte à côte.


```{r mfrow0, fig.width=7, fig.height = 3.5,  eval = TRUE}
# define the figure layout (1 row, 2 columns)
par(mfrow = c(1, 2))
# define theme
mf_theme("default", mar = c(0,0,1.2,0), tab = FALSE, pos = "center")
# first map
mf_map(com)
mf_map(com, "TER_F", "prop", 
       val_max = 4000, 
       leg_pos = "topleft", 
       leg_title = "N.")
mf_title("Tertiaire: Femmes")
# second map
mf_map(com)
mf_map(com, "TER_H", "prop", 
       val_max = 4000, 
       leg_pos = NA)
mf_title("Hommes")
```




## Export des cartes

`mf_export()` permet d'exporter des cartes en PNG ou en SVG.  
Le ratio hauteur/largeur de la carte correspondra au ratio hauteur/largeur d'un objet spatial.  
Si `width` est spécifié alors `height` est déduit du ratio hauteur/largeur de `x`, de la taille des marges de la figure et des dimensions du titre (du thème utilisé en somme).     
`mf_export()` peut aussi être utilisé pour définir un thème, ajouter de l'espace sur un ou plusieurs côté de la carte ou encore centrer la carte sur une zone particulière. 

:::{.callout-note}
Toujours utiliser `add = TRUE` après un appel à `mf_export()` et ne pas oublier d'utiliser `dev.off()` pour finaliser l'export de la figure. 
:::



```{r export, results='hide'}
#création d'un thème personnel
mon_theme <- mf_theme("candy", bg = "grey80")
mf_export(
  x = com, 
  filename = "img/com_default.png",
  width = 600, 
  theme = mon_theme
)
mf_map(com, add = TRUE)
mf_title("Le Lot")
dev.off()

```

![](img/com_default.png)

L'emprise de cette carte est exactement celle de la région affichée.

Lors de l'export suivant nous ajoutons de l'espace sur la partie droite de la carte (50% de la largeur de `x`).


```{r export2, results="hide"}
mf_export(
  x = com, 
  filename = "img/com_expand.png",
  width = 600, 
  expandBB = c(0, 0, 0, .5), 
  theme = mon_theme
)
mf_map(com, add = TRUE)
mf_title("Le Lot")
dev.off()
```

![](img/com_expand.png)




## Ajouter une image sur une carte

Cela peut être utile pour ajouter un logo, un pictogramme. La fonction `readPNG()` 
du package `png` permet l'ajout d'images sur une figure.

```{r logo}
mf_theme("default", mar = c(0,0,0,0))
library(png)
# import de l'image
logo <- readPNG("img/Logo CG 46 - Bleu.png")
# dimension de l'image en unité de la carte
pp <- dim(logo)[2:1] * 20
# Définition d'un point d'encrage de l'image dans la figure, ici
# le coin supérieur gauche de la bounding box du département
xy <- st_bbox(com)[c(1,4)]
mf_map(com, col = "#D1914D", border = "white")
rasterImage(
  image   = logo,
  xleft   = xy[1],
  ybottom = xy[2] - pp[2],
  xright  = xy[1] + pp[1],
  ytop    = xy[2]
)
```


## Placer précisément un élément sur la carte

Dans plusieurs fonctions de `mapsf` il est possible de placer des éléments d'habillage de manière interactive avec la position *"interactive"*.

![](img/interactive.gif)

:::{.callout-note}
Plus généralement la fonction `locator()` permet de cliquer sur une figure et d'obtenir les coordonnées d'un point dans le système de coordonnées de la figure (de la carte). `locator()`peut être utilisée sur la plupart des graphiques (pas ceux produits avec `ggplot2`).
:::


## Ajouter un ombrage à une couche

La fonction `mf_shadow()` permet de créer une ombre à une couche de polygones. 
```{r shadow}
mf_theme("default")
mf_shadow(com)
mf_map(com, add=TRUE)
```


## Création de cartons

La fonction `mf_inset_on()` permet de démarrer la création d'un carton.
Il faut ensuite "refermer" le carton avec `mf_inset_off()`.

```{r inset, fig.width = 6.5, fig.height = 5}
# Démarer la figure sur Cahors et ses environs
mf_init(
  x = com_sel,
  theme = "agolalight",
  expandBB = c(0, 0, 0, .5) # ajout d'un espace sur la droite
)

# affichage de toutes les communes
mf_map(com, add = TRUE)
# affichage de la sélection de communes
mf_map(com_sel, col = "tomato4", 
       border = "tomato1", lwd = 2, add = TRUE)

# Démarrer le carton en haut à droite sur
# le ratio width/height du département
# avec une largeur d'1/3 de la largeur de la figure
mf_inset_on(x = com, pos = "topright", cex = .3)
# affichage de toutes les communes
mf_map(com, lwd = .5, border = "grey90")
# affichage des communes sélectionnées
mf_map(
  com_sel,
  col = "tomato4",
  border = "tomato1",
  lwd = .5,
  add = TRUE
)
# échelle
mf_scale(size = 10, pos = "bottomleft", cex = .6, lwd = .5)
# Fermer le carton
mf_inset_off()

# Ajouter titre et échelle
mf_title("Cahors et ses environs")
mf_scale(5, pos = 'bottomleft')

```


:::{.callout-note}
## Carton "Carte du monde
On peut facilement créer un carton avec la position d'un point sur une carte du monde avec la fonction `mf_worldmap()` et `mf_inset_on(x = "worldmap", ...)`. 
```{r carton, fig.height=6, fig.width=5, results = FALSE}
mf_map(com)
mf_inset_on(x = "worldmap")
mf_worldmap(com)
mf_inset_off()
```
:::


## Exercice - Cartographie avec mise en page

1. Cette exercice utilise les données du projet RStudio **geodata**.  
    [Télécharger le projet](geodata.zip){.btn .btn-primary .btn-sm role="button"} 

2. Importer la couche des communes du département du Lot à partir du fichier geopackage **lot.gpkg**.

3. Importer le fichier **com.csv**.   
  Ce jeu de données porte sur les communes du lot et contient plusieurs variables supplémentaires: 
    - le nombre d'actifs (**ACT**). 
    - le nombre d'actifs dans l'industrie (**IND**)
    - La part des actifs dans la population totale (**SACT**)
    - La part des actifs dans l'industrie dans le total des actifs (**SACT_IND**) 

4. Joindre le jeu de données et la couche des communes. 

5. Créez une carte représentant la population active travaillant dans l'industrie. 

6. Ajoutez les éléments d'habillage indispensables.

7. Utilisez un thème personnalisé.

8. Ajoutez un carton de localisation du Lot.

9. Exportez la carte au format PNG avec 800 pixels de large. 

10. Comment rendre la carte plus intelligible ? Allez-y !


:::{.callout-note}
Vous pouvez utiliser le fichier **exo_cartographie_mise_en_page.R** pour vous guider dans cette exercice.   
Vous trouverez la correction de cette exercice dans le fichier **exo_cartographie_mise_en_page_correction.R**


:::
