# Les sélections

```{r initsel, nm = TRUE}
#| include: false
library(mapsf)
library(sf)
com <- st_read("data/lot.gpkg", layer = "communes", quiet = TRUE)
```


## Sélection par attributs

Les objets `sf` **sont** des `data.frame`, on peut donc sélectionner leur lignes et leur colonnes de la même manière que les `data.frame`. 

```{r selectAttr}
# sélection de lignes
com[1:2, ]
com[com$NOM_COM == "Gramat", ]
# sélection de colonnes
com[com$NOM_COM == "Gramat", 1:4]
com[, "POPULATION"]
```


::: {.callout-note}
Notez que la dernière sélection (`com[, "POPULATION"]`) conserve la colonne des géométries. La même opération sur un `data.frame` "pur" n'aurait sélectionné que le vecteur des valeurs de la colonne **POPULATION** :
```{r}
com_df <- st_drop_geometry(com)
com_df[, "POPULATION"]
```
Pour obtenir le même résultat avec un objet `sf` on peut utiliser :
```{r}
com[["POPULATION"]]
```
:::

## Sélection spatiale


### Intersections
Sélection des routes intesectant la commune de Gramat. 

```{r intersects}
route <- st_read("data/lot.gpkg", layer = "routes", quiet = TRUE)
gramat <-  com[com$NOM_COM == "Gramat", ]
inter <- st_intersects(x = route, y = gramat, sparse = FALSE)
head(inter)
dim(inter)
```

L'objet **inter** est une matrice qui indique pour chacun des éléments de **route** (1054 éléments)
si il intersecte chacun des élément de **gramat** (1 élément).   
La dimension de la matrice est donc bien 1054 lignes * 1 colonne.    
Notez l'utilisation du paramètre `sparse = FALSE` ici.   
Il est ensuite possible de créer une colonne à partir de cet objet :

```{r intersects2}
route$intersect_gramat <- inter[, 1]
# selection des routes qui intersectent Gramat
route_gramat <- route[route$intersect_gramat, ]
mf_map(gramat, col = "lightblue")
mf_map(route, add = TRUE)
mf_map(route_gramat, col = "tomato", lwd = 2, add = TRUE)
```

::: {.callout-note}
## Différence entre `sparse = TRUE` et `sparse = FALSE`
```{r st_intersparse}
#| echo: false
library(sf)
set.seed(41)
x <- mapsf::mf_get_mtq()
grid <- st_make_grid(x = x, n = c(2,2))
grid <- st_sf(id = 1:4, geom = grid)
pt <- st_sample(grid, size = 8)
pt <- st_sf(id = letters[1:length(pt)], geom = pt)

library(mapsf)
mf_init(grid, expandBB = c(0, 0, 0, .3))
mf_map(grid, add = T)
mf_label(grid, "id", cex = 2, pos = 3)
mf_map(pt, add = T, pch = 4, cex = 1.2, lwd = 2, col = "red")
mf_label(pt, "id", cex = 1, col = "red", font = 3, pos = 2, overlap = F)
legend(x = "topright", 
       col = c("black", NA, "red"), 
       legend = 
         c("    grid  ", NA, "    pt  "), 
       pch = c(22,NA,4), 
       pt.bg = "grey", 
       pt.cex = c(6,NA, 1.2), 
       bty = "n")
mf_title("st_intersects()", tab = FALSE, pos = "center")
```


* `sparse = TRUE`
```{r st_intersparse2}
inter <- st_intersects(x = grid, y = pt, sparse = TRUE)
inter
```

* `sparse = FALSE`
```{r st_intersparse3}
inter <- st_intersects(x = grid, y = pt, sparse = FALSE)
rownames(inter) <- grid$id
colnames(inter) <- pt$id
inter
```

:::

### Contains / Within
Sélection des routes contenues dans la commune de Gramat. 
La fonctin `st_within()` fonctionne comme la fonction `st_intersects()`

```{r within}
within_g <- st_within(route, gramat, sparse = FALSE)
route$within_gramat <- within_g[, 1]
route_gramat2 <- route[route$within_gramat, ]
mf_map(gramat, col = "lightblue")
mf_map(route, add = TRUE)
mf_map(route_gramat2, col = "tomato", lwd = 2, add = TRUE)
```



