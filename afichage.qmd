
# Exploration et affichage


```{r knitr_init3, echo=FALSE, cache=FALSE}
library(knitr)
knit_hooks$set(nm = function(before, options, envir){
  if (before){
    par(mar=c(0,0,0,0))
  } 
})
```

## Aperçu des variables
Les objets `sf` **sont** des `data.frame`.   
Nous pouvons utiliser les fonctions `head()` ou `summary()`.

```{r explor, nm = TRUE}
library(sf)
com <- st_read("data/lot.gpkg", layer = "communes", quiet = TRUE)
head(com)
summary(com)
```




::: {.callout-note}
## Supprimer la colonne de géométrie d'un objet sf
Pour transformer un objet `sf` en `data.frame` "pur" nous pouvons utiliser les fonctions `st_set_geometry()` ou `st_drop_geometry()`. 
```{r drop}
com_df1 <- st_set_geometry(com, NULL)
com_df2 <- st_drop_geometry(com)
identical(com_df1, com_df2)
head(com_df1)
```
:::


## Affichage 

Aperçu des variables avec `plot()` :
```{r affichage_complet}
plot(com)
```

Affichage d'une seule variable : 
```{r affi_geom2}
plot(com["POPULATION"])
```

Affichage de la géométrie seule :

```{r affi_geom3, nm=TRUE}
plot(st_geometry(com))
```

Il est aussi possible, comme nous l'avons vu précédement, d'utiliser le package `mapsf` pour afficher les objets `sf`

```{r affichage_mapsff}
#| eval: true
mf_map(com, col = "ivory4", border = "ivory")
```

## Affichage interactif
<img src="img/logo_mapview.gif" align="right" width="150"/> 

Le package `mapview` [@R-mapview] permet d'afficher facilement des objets `sf` sur une carte interactive. 

```{r impp, nm = TRUE}
#| cache: false
#| echo: false
#| include: false
library(sf)
com <- st_read("data/lot.gpkg", layer = "communes", quiet = TRUE)
```


```{r mapview1}
#| cache: false
library(mapview)
mapview(com)
```



</br>
Pour combiner des couches il suffit d'utiliser le `+`.

```{r maview2}
#| cache: false
resto <- sf::st_read("data/lot.gpkg", layer = "restaurants", quiet = TRUE)
mapview(com) + mapview(resto)
```


